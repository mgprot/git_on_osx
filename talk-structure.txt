Git with XCode on OS-X
======================

(C) Stephen Riehm
2009-11-08

Introduction:
=============

    Reference: http://git-scm.com

    very quick overview of what git is
        version control
        snap-shot concept
            - always consistent
            - reproducable
            - no individual file-versions
            - no sub-trees
        commit chains
        git objects:
            - blobs
            - trees
            - commits
            - tags
            - branches
        name spaces:
            - distributed :-)
            - your namespace has no prefix
            - each repository has it's own namespace, with the name you supplied
                - tom/master
                - tom/new_button
                - tom/bug_fix
            - always work locally
            - merge / apply commits from other people

Get your hands dirty:
=====================

    requires command line!
        gitx is a nice for:
            - browsing changes
            - committing
            but fails for just about everything else

    You code C? Don't be afraid :-)

    XCode notices changes to project directory
        - let it "revert" to version on disk whenever you checkout a different version

Configuration:
==============

    generic:
        - ~/.gitconfig
            - core.pager
            - core.excludesfile
            - user.name
            - user.email
            - format.pretty

        -----
            [core]
                    pager = more
                    excludesfile = /Users/steve/Library/Preferences/login.configurations/config/git/gitignore
            [user]
                    name = Stephen Riehm
                    email = steve@opensauce.de
            [format]
                    pretty = format:%h %ci [%aN] %s
        -----

    mac specific:
        - ~/.gitignore  (from excludesfile config)

            .DS_Store
            *.mode1v3
            *.pbxuser
            *.objc_sync
            version.txt
            .Spotlight-V100
            .com.apple.timemachine.supported
            .fseventsd

        - .gitattributes (in project directory)

            *.pbxproj -crlf -diff -merge
            *.nib -crlf -diff -merge
            *.xib -crlf -diff -merge

            required because they look like text, but really can't be merged :-(

Typical usage
=============

    Whenever I get lost
    -------------------

        git <cmd> --help

        http://git-scm.com

        google :-)

    setup new project
    -----------------

        create XCode project

        localhost > cd project_dir

        localhost > git init
        localhost > git add .
        localhost > git commit -m 'initial commit'

        connect to ssh server:
        ----------------------
            localhost > ssh server
            remotehost > cd git-archive
            mkdir project_dir.git
            cd project_dir.git
            git init --bare
            exit

            git clone --bare project_dir project_dir.git
            scp -r project_dir.git server:/path/to/git/repositories/
            rm -rf project_dir.git

            git remote add servername ssh://server/~/Git/project_dir.git
            git push servername master

        usb stick as 'server':
        ----------------------
            cd /Volumes/usb_stick/git
            mkdir project_dir.git
            cd project_dir.git
            git init --base

            cd -                    # back to original project directory
            git remote add usb_stick /Volumes/usb_stick/git/project_dir.git
            git push usb_stick --all

        Where am I connected to?
        ------------------------

            git remote -v


        Sourcing from multiple repositories:
        ------------------------------------

            set up a repo-group in .git/config
            -----
            [remotes]
                    group_name = servername1 servername2
            -----

    clone an existing project
    -------------------------

        git clone -o servername URL
        cd project_dir
        git checkout -b my_stuff

        or just "git checkout tag" if I'm building git, perl etc

    clone a local repo if I want to see what git does
    -------------------------------------------------

        git clone other_git_dir

    common round-trip
    -----------------

        git fetch servername                        # git pull == fetch + merge - nasty!
    OR  git remote update server_group

        git show-branch -a
            OR git branch -a
        git show-branch my_branch reference_branch

        git log remote_branch
        git tag -ln

        git merge [-f] remote/branch

        git status
        git diff [-w] [filename]
        git diff [-w] branch
        gitx

        git checkout -f HEAD                        # roll back changes - no commit
        git reset --hard                            # throw away index too

        git add -u                                  # catches removed files! (renames & new files must still be specified seperately)
        git add <file> / <directory>
        git commit -m 'message'
        git tag -[a|s] tagname -m 'message'

        git push -f servername                      # if you've done a non-fast-forward commit or re-based your branch

        git push servername --tags                  # pushes all the tags

    less common
    -----------

        work out where I am:

            git describe    # useful for building release info

        remove a branch locally:

            git branch -[d|D] dead_branch

        remove a branch from a remote repository:

            git push servername :dead_branch

        delete everything that git doesn't know about:

            git clean -dxn
            git clean -dxf

        grep working directory for something:

            git grep 'blah'

        check history:

            git show commit

        change history:

            rebase 'v' merge

            git rebase -i base_commit

            git rebase existing_branch_base --onto new_brach_stump      # useful if an old commit needs to be replaced with a new one

            git cherry-pick - add individual commits to a branch
            git apply - add a patch to the current branch
            git rebase --onto - apply a whole chain of commits (ie: possibly leaving the first few out)
            git rebase --interactive - interactively squash multiple commits into a single commit, drop or reorder commits


        new branch from old_commit:

            git checkout -b new_branch old_commit

        apply individual commits from another branch:

            git cherry
            git cherry-pick commit

        re-apply commits which previously caused conflicts, using the same conflict resolutions

            git rerere

        find out who wrote a line of code:

            git blame file

        find out which commit broke something:

            work out how best to test for the problem
            git blame   # if location of broken code is known

            write simple test script (ie: check for sig-fault)

            git bisect <bad> <good...>
            git bisect good
            git bisect bad
            git bisect skip
            git bisect run test_script options                          # ie: git bisect run grep -R something .
                                                                        # note: exit 0 == good, 1..124 == bad, 125 == skip,
            git bisect visualize
            git bisect log                                              # ???
            git bisect replay                                           # ???

            git bisect reset                                            # remove bisect branch and return to point before bisecting began

            http://www.kernel.org/pub/software/scm/git/docs/git-bisect-lk2009.html
            http://lwn.net/Articles/317154/
            http://www-cs-students.stanford.edu/~blynn/gitmagic/book.html
            http://mirror.yandex.ru/pub/software/scm/git/docs/gitworkflows.html
            http://article.gmane.org/gmane.comp.version-control.git/45195/

        clean up git repository:

            git gc                                                      # can recover LARGE amounts of disk space

    pathalogical use cases
    ----------------------

        course exercises
        create an empty commit first, tag it 'empty'.
        create a branch for each chapter
        start each branch from the 'empty' commit
        create tags for initial setup (equal to each branch head)
        fill in solutions
        create tags for solutions
        reset branch heads to chapter tags

    Working with others
    -------------------

        each has their own published repo
        NEVER push to anyone elses repo
        use "git remote update" to scan all friends repos

        dictator / lieutenents

        setting up a github account
            github ssh key
            create repository
            initial push
            keeping in sync
            forking an existing github repo

References:
===========

    http://git-scm.com
    http://gitready.com
